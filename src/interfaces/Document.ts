// Document Status Types
export type DocumentStatus = 'Pending' | 'In-Route' | 'Approved' | 'Declined' | 'Draft' | 'Under Review';

// Document Priority Types
export type DocumentPriority = 'Low' | 'Medium' | 'High' | 'Urgent';

// Document Type Categories
export type DocumentType = 'PDF' | 'DOCX' | 'XLSX' | 'TXT' | 'Purchase Request' | 'Purchase Order' | 'Memo' | 'Letter' | 'Report';

// Base Document Interface
export interface BaseDocument {
    id: string;
    name: string;
    title?: string; // Alternative to name for some components
    type: DocumentType;
    status: DocumentStatus;
    dateCreated: string;
    lastModified: string;
    size: string;
    description?: string;
    createdBy?: string;
    submittedBy?: string; // Alternative to createdBy for tracking
    version?: string;
    tags?: string[];
    priority?: DocumentPriority;
    department?: string;
    trackingNumber?: string;
}

// Extended Document Interface for MyDocuments component
export interface MyDocument extends BaseDocument {
    // All properties from BaseDocument are inherited
}

// Document for Tracking component
export interface DocumentTrack extends BaseDocument {
    currentStatus: string;
    trackingNumber: string; // Required for tracking
    submittedBy: string; // Required for tracking
    dateSubmitted: string; // Required for tracking
    steps: TrackingStep[];
}

// Tracking Step Interface
export interface TrackingStep {
    id: string;
    title: string;
    description: string;
    status: 'completed' | 'current' | 'pending' | 'rejected';
    date?: string;
    assignedTo?: string;
    comments?: string;
}

// Document for Create/Update operations
export interface CreateDocument extends Omit<BaseDocument, 'id' | 'dateCreated' | 'lastModified'> {
    // Properties needed for creating a document
    // id, dateCreated, lastModified will be generated by the system
}

// Document Dialog Props Interface
export interface DocumentDialogProps {
    isOpen: boolean;
    onClose: () => void;
    document: MyDocument | null;
    mode: 'view' | 'edit';
    onSave?: (document: MyDocument) => void;
}

// Document Filter Interface
export interface DocumentFilters {
    searchTerm: string;
    statusFilter: DocumentStatus | '';
    typeFilter: DocumentType | '';
    dateFilter: string;
    priorityFilter?: DocumentPriority | '';
    departmentFilter?: string;
}

// Document Sort Interface
export interface DocumentSort {
    field: keyof BaseDocument;
    direction: 'asc' | 'desc';
}

// Purchase Request Item Interface (for Create Document)
export interface PurchaseRequestItem {
    id: number;
    stockPropertyNo: string;
    unit: string;
    itemDescription: string;
    quantity: string;
    unitCost: string;
    totalCost: number;
}

// Purchase Request Form Interface
export interface PurchaseRequestForm {
    division: string;
    office: string;
    chargeToSpecify: boolean;
    fundSource: string;
    saroNo: string;
    date: string;
    reference: string;
    prNo: string;
    purpose: string;
    items: PurchaseRequestItem[];
    requestedBy: {
        name: string;
        designation: string;
    };
    approvedBy: {
        name: string;
        designation: string;
    };
    grandTotal: number;
}

// API Response Interfaces
export interface DocumentListResponse {
    documents: MyDocument[];
    total: number;
    page: number;
    limit: number;
}

export interface DocumentResponse {
    document: MyDocument;
    success: boolean;
    message?: string;
}

// Common Document Actions
export interface DocumentActions {
    onView: (document: MyDocument) => void;
    onEdit: (document: MyDocument) => void;
    onDownload: (document: MyDocument) => void;
    onDelete: (document: MyDocument) => void;
    onTrack?: (document: MyDocument) => void;
}

// Document Statistics Interface
export interface DocumentStats {
    total: number;
    pending: number;
    approved: number;
    declined: number;
    inRoute: number;
    draft?: number;
    rejected?: number;
}
